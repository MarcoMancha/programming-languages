#lang racket

(define (bst-has? tree value)
  (or (equal? (first tree) value)
      (in-bst (rest tree) value)))

(define (in-bst forest value)
  (if (null? forest)
      #f
      (cond
        [(list? (first forest))
         (if (< (first(first forest)) value)
            (bst-has? (first forest) value)
            (in-bst (rest forest) value))]
        [else 
        (if (< (first forest) value)
            (bst-has? (first forest) value)
            (in-bst (rest forest) value))])))

(define t '(8(5 (2) (7))(11 (9) (61))))

(bst-has? t 8)
(bst-has? t 5)
(bst-has? t 61)
(bst-has? t 9)
(bst-has? t 100)
;;(bst-has? t -100)
(bst-has? t 7)
